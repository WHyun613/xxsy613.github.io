<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水云的博客</title>
  
  <subtitle>计算机在读小白</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-26T07:07:26.518Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>潇湘水云</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日记</title>
    <link href="http://example.com/2022/09/26/%E6%97%A5%E8%AE%B0/"/>
    <id>http://example.com/2022/09/26/%E6%97%A5%E8%AE%B0/</id>
    <published>2022-09-26T06:55:56.000Z</published>
    <updated>2022-09-26T07:07:26.518Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a7d4801c2bb1f053b770153c2818073db39f206b5062cc51a107589ad1aaf3ab"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你要看是吧,那就证明一下自己的身份吧,我弟弟的生日是</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">个人羞耻内容警告,还是别看了吧</summary>
    
    
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Realm学习笔记</title>
    <link href="http://example.com/2022/09/20/Realm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/20/Realm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-20T09:03:36.000Z</published>
    <updated>2022-09-20T09:04:03.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Realm-Swift学习笔记（一）"><a href="#Realm-Swift学习笔记（一）" class="headerlink" title="Realm-Swift学习笔记（一）"></a>Realm-Swift学习笔记（一）</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="打开Realm数据库"><a href="#打开Realm数据库" class="headerlink" title="打开Realm数据库"></a>打开Realm数据库</h3><p>初始化realm对象：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> realm <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">Realm</span>()</span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.add(<span class="type">Student</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化一个默认的Realm数据库</p><h3 id="配置Realm数据库"><a href="#配置Realm数据库" class="headerlink" title="配置Realm数据库"></a>配置Realm数据库</h3><ul><li>可配置本地Realm数据库在磁盘上的路径</li><li>对于可同步的Realm数据库而言，可以配置管理用户，以及远端的路径</li><li>配置版本迁移</li><li>压缩功能，高效地利用磁盘空间</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">setDefaultRealmForUser</span>(<span class="params">username</span>: <span class="type">String</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> config <span class="operator">=</span> <span class="type">Realm</span>.<span class="type">Configuration</span>()</span><br><span class="line">  config.fileURL <span class="operator">=</span> config.fileURL<span class="operator">!</span>.deletingLastPathComponent().appendingPathComponent(<span class="string">&quot;<span class="subst">\(username)</span>.realm&quot;</span>)</span><br><span class="line">  <span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration <span class="operator">=</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作realm对象"><a href="#操作realm对象" class="headerlink" title="操作realm对象"></a>操作realm对象</h2><h3 id="自动更新对象"><a href="#自动更新对象" class="headerlink" title="自动更新对象"></a>自动更新对象</h3><p>Object实例是底层数据的动态体现，<u>会自动进行更新</u>，修改某个对象的属性，会立即影响到所有指向该对象的其他实例。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStudent <span class="operator">=</span> <span class="type">Student</span>()</span><br><span class="line">myStudent.name <span class="operator">=</span> <span class="string">&quot;yun&quot;</span></span><br><span class="line">myStudent.age <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.add(myStudent)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myself <span class="operator">=</span> realm.objects(<span class="type">Student</span>.<span class="keyword">self</span>).filter(<span class="string">&quot;age == 20&quot;</span>).first</span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  myself<span class="operator">!</span>.age <span class="operator">=</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age of mine: <span class="subst">\(myStudent.age)</span>&quot;</span>)  <span class="comment">// age of mine: 18</span></span><br></pre></td></tr></table></figure><h3 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h3><p><u>对象的所有更改操作（增删改查），都必须在写入事务中执行（write闭包）</u>。</p><p>Realm对象的使用方法与其他正常swift对象无异。未添加到Realm数据库之前的Realm对象，称其为未管理对象。写入事务会产生性能消耗，应当尽可能减少写入事务的次数。</p><p><u>写入操作是同步以及阻塞进行的</u>，不会异步执行。写入事务会在beginWrite()执行时自动刷新，因此重复写入并不会产生竞争条件。</p><h3 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h3><h4 id="直接更新"><a href="#直接更新" class="headerlink" title="直接更新"></a>直接更新</h4><p>直接设置对象的属性从而完成更新</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  myStudent.name <span class="operator">=</span> <span class="string">&quot;xxsy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键值编码"><a href="#键值编码" class="headerlink" title="键值编码"></a>键值编码</h4><p>Object，Result，List均允许使用<strong>键值编码（KVC）</strong>。需要批量更新对象时，为集合实现KVC是一个很好的做法，这样就不用承受遍历集合时为每个项目创建访问器所带来的性能消耗。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students <span class="operator">=</span> realm.objects(<span class="type">Student</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  students.first<span class="operator">?</span>.setValue(<span class="literal">true</span>, forKetPath: <span class="string">&quot;isFirst&quot;</span>)</span><br><span class="line">  students.setValue(<span class="string">&quot;China&quot;</span>, forKeyPath: <span class="string">&quot;Country&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过主键更新"><a href="#通过主键更新" class="headerlink" title="通过主键更新"></a>通过主键更新</h4><p>如果数据模型类中包含了主键，可以用Realm().add(_:update:)，从而让Realm基于主键来自动更新或者添加对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个book对象，其主键与之前存储的book对象相同</span></span><br><span class="line"><span class="keyword">let</span> cheeseBook <span class="operator">=</span> <span class="type">Book</span>()</span><br><span class="line">cheeseBook.title <span class="operator">=</span> <span class="string">&quot;Cheese recipies&quot;</span></span><br><span class="line">cheeseBook.price <span class="operator">=</span> <span class="number">9000</span></span><br><span class="line">cheeseBook.id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">// 更新这个id=1的book</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.add(cheeseBook, update: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个id &#x3D; 1的Book对象存在于数据库当中，那么该对象只会进行更新，如果不存在的话，那么一个全新的Book对象就会被创建出来，并被添加到数据库当中。</p><p>可以传递一个子集，其中只包含打算更新的值，从而对带有主键的对象进行部分更新：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设主键为&#x27;1&#x27;的&quot;Book&quot;对象已经存在</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.create(<span class="type">Book</span>.<span class="keyword">self</span>, value:[<span class="string">&quot;id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;price&quot;</span>: <span class="number">9000.0</span>], update: <span class="literal">true</span>)</span><br><span class="line"> <span class="comment">// book对象的title属性保持不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有定义主键时不要对对象传递update:true参数。</p><h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><p>在写入事务中，将要删除的对象传递给Realm().delete(_:)方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cheeseBook 存储在Realm数据库中</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.delete(cheeseBook)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.deleteAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>查询会返回一个Results实例，其中包含一组Object对象。</p><p>查询结果并不是数据的拷贝：<u>修改查询结果会直接修改磁盘上的数据</u></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students <span class="operator">=</span> realm.objects(<span class="type">Student</span>.<span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用断言字符串来查询</span></span><br><span class="line"><span class="keyword">var</span> goodStudents <span class="operator">=</span> realm.objects(<span class="type">Student</span>.<span class="keyword">self</span>).filter(<span class="string">&quot;grade &gt;= 90 AND awards == true&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>比较操作数可以是属性名，也可以是常量。但至少要有一个操作数是属性名；</p></li><li><p>比较操作符 &#x3D;&#x3D;、&lt;&#x3D;、&lt;、&gt;&#x3D;、&gt;、!&#x3D; 和 BETWEEN 支持 Int、Int8、Int16、Int32、Int64、Float、Double 以及 Date 这几种属性类型，例如 age &#x3D;&#x3D; 45；</p></li><li><p>比较是否相同：&#x3D;&#x3D; 和 !&#x3D;，例如，Results().filter(“company &#x3D;&#x3D; %@”, company)；</p></li><li><p>比较操作符 &#x3D;&#x3D; 和 !&#x3D; 支持布尔属性；</p></li><li><p>对于 String 和 Data 属性而言，支持使用 &#x3D;&#x3D;、!&#x3D;、BEGINSWITH、CONTAINS 和 ENDSWITH 操作符，例如 name CONTAINS ‘Ja’；</p></li><li><p>对于 String 属性而言，LIKE 操作符可以用来比较左端属性和右端表达式：? 和 * 可用作通配符，其中 ? 可以匹配任意一个字符，* 匹配 0 个及其以上的字符。例如：value LIKE ‘?bc*’ 可以匹配到诸如 “abcde” 和 “cbc” 之类的字符串；</p></li><li><p>字符串的比较忽略大小写，例如 name CONTAINS[c] ‘Ja’。请注意，只有 “A-Z” 和 “a-z” 之间的字符大小写会被忽略。[c] 修饰符可以与 [d] 修饰符结合使用；</p></li><li><p>字符串的比较忽略变音符号，例如 name BEGINSWITH[d] ‘e’ 能够匹配到 étoile。这个修饰符可以与 [c] 修饰符结合使用。（这个修饰符只能够用于 Realm 所支持的字符串子集：参见当前的限制一节来了解详细信息。）</p></li><li><p>Realm 支持以下组合操作符：“AND”、“OR” 和 “NOT”，例如 name BEGINSWITH ‘J’ AND age &gt;&#x3D; 32；</p></li><li><p>包含操作符：IN，例如 name IN {‘Lisa’, ‘Spike’, ‘Hachi’}；</p></li><li><p>空值比较：&#x3D;&#x3D;、!&#x3D;，例如 Results().filter(“ceo &#x3D;&#x3D; nil”)。请注意，Realm 将 nil 视为一种特殊值，而不是某种缺失值；这与 SQL 不同，nil 等同于自身；</p></li><li><p>ANY 比较，例如 ANY student.age &lt; 21；</p></li><li><p>List 和 Results 属性支持聚集表达式：@count、@min、@max、@sum 和 @avg，例如 realm.objects(Company.self).filter(“employees.@count &gt; 5”) 可用以检索所有拥有 5 名以上雇员的公司。</p></li><li><p>支持子查询，不过存在以下限制：</p><ul><li><p>@count 是唯一一个能在 SUBQUERY 表达式当中使用的操作符；</p></li><li><p>SUBQUERY(…).@count 表达式只能与常量相比较；</p></li><li><p>目前仍不支持关联子查询。</p></li></ul></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>Results允许您指定一个排序标准，然后基于关键路径，属性或者多个排序描述符来进行排序。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sortedStudent <span class="operator">=</span> realm.objects(<span class="type">Student</span>.<span class="keyword">self</span>).filter(<span class="string">&quot;grade &gt;= 90&quot;</span>).sorted(byKeyPath: <span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> goodStudent <span class="operator">=</span> realm.objects(<span class="type">Student</span>.<span class="keyword">self</span>).filter(<span class="string">&quot;grade&gt;=90&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> goodStudentWithAwards <span class="operator">=</span> goodStudent.filter(<span class="string">&quot;awards == true&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="结果的自更新"><a href="#结果的自更新" class="headerlink" title="结果的自更新"></a>结果的自更新</h3><p>Objects实例是底层数据的动态体现，其会自动进行更新</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> puppies <span class="operator">=</span> realm.objects(<span class="type">Dog</span>.<span class="keyword">self</span>).filter(<span class="string">&quot;age &lt; 2&quot;</span>)</span><br><span class="line">puppies.count <span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">    realm.create(<span class="type">Dog</span>.<span class="keyword">self</span>, value: [<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Fido&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">puppies.count <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><h3 id="本地迁移"><a href="#本地迁移" class="headerlink" title="本地迁移"></a>本地迁移</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此段代码位于 application(application:didFinishLaunchingWithOptions:)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config <span class="operator">=</span> <span class="type">Realm</span>.<span class="type">Configuration</span>(</span><br><span class="line">    <span class="comment">// 设置新的架构版本。必须大于之前所使用的</span></span><br><span class="line">    <span class="comment">// （如果之前从未设置过架构版本，那么当前的架构版本为 0）</span></span><br><span class="line">    schemaVersion: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置模块，如果 Realm 的架构版本低于上面所定义的版本，</span></span><br><span class="line">    <span class="comment">// 那么这段代码就会自动调用</span></span><br><span class="line">    migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// 我们目前还未执行过迁移，因此 oldSchemaVersion == 0</span></span><br><span class="line">        <span class="keyword">if</span> (oldSchemaVersion <span class="operator">&lt;</span> <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有什么要做的！</span></span><br><span class="line">            <span class="comment">// Realm 会自行检测新增和被移除的属性</span></span><br><span class="line">            <span class="comment">// 然后会自动更新磁盘上的架构</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知 Realm 为默认的 Realm 数据库使用这个新的配置对象</span></span><br><span class="line"><span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration <span class="operator">=</span> config</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们已经通知了 Realm 如何处理架构变化，</span></span><br><span class="line"><span class="comment">// 打开文件将会自动执行迁移</span></span><br><span class="line"><span class="keyword">let</span> realm <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">Realm</span>()</span><br></pre></td></tr></table></figure><h3 id="值的更新"><a href="#值的更新" class="headerlink" title="值的更新"></a>值的更新</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 此段代码位于 application(application:didFinishLaunchingWithOptions:)</span></span><br><span class="line"></span><br><span class="line"><span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration <span class="operator">=</span> <span class="type">Realm</span>.<span class="type">Configuration</span>(</span><br><span class="line">    schemaVersion: <span class="number">1</span>,</span><br><span class="line">    migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> (oldSchemaVersion <span class="operator">&lt;</span> <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// enumerateObjects(ofType:_:) 方法将会遍历</span></span><br><span class="line">            <span class="comment">// 所有存储在 Realm 文件当中的 `Person` 对象</span></span><br><span class="line">            migration.enumerateObjects(ofType: <span class="type">Person</span>.className()) &#123; oldObject, newObject <span class="keyword">in</span></span><br><span class="line">                <span class="comment">// 将两个 name 合并到 fullName 当中</span></span><br><span class="line">                <span class="keyword">let</span> firstName <span class="operator">=</span> oldObject<span class="operator">!</span>[<span class="string">&quot;firstName&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">                <span class="keyword">let</span> lastName <span class="operator">=</span> oldObject<span class="operator">!</span>[<span class="string">&quot;lastName&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">                newObject<span class="operator">!</span>[<span class="string">&quot;fullName&quot;</span>] <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(firstName)</span> <span class="subst">\(lastName)</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此段代码位于 application(application:didFinishLaunchingWithOptions:)</span></span><br><span class="line"></span><br><span class="line"><span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration <span class="operator">=</span> <span class="type">Realm</span>.<span class="type">Configuration</span>(</span><br><span class="line">    schemaVersion: <span class="number">1</span>,</span><br><span class="line">    migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// 我们目前还未执行过迁移，因此 oldSchemaVersion == 0</span></span><br><span class="line">        <span class="keyword">if</span> (oldSchemaVersion <span class="operator">&lt;</span> <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 重命名操作必须要在 `enumerateObjects(ofType: _:)` 调用之外进行</span></span><br><span class="line">            migration.renameProperty(onType: <span class="type">Person</span>.className(), from: <span class="string">&quot;yearsSinceBirth&quot;</span>, to: <span class="string">&quot;age&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>当整个 Realm 数据库发生变化时，就会发送 Realm 通知；如果只有个别对象被修改、添加或者删除，那么就会发送集合通知。</p><h3 id="Realm通知"><a href="#Realm通知" class="headerlink" title="Realm通知"></a>Realm通知</h3><p>通知处理模块可以对整个Realm数据库进行注册。每次涉及到Realm的写入事务提交之后，无论写入事务发生在哪个线程还是进程中，通知处理模块都会被激活。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 Realm 通知</span></span><br><span class="line"><span class="keyword">let</span> token <span class="operator">=</span> realm.observe &#123; notification, realm <span class="keyword">in</span></span><br><span class="line">    viewController.updateUI()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随后</span></span><br><span class="line">token.invalidate()</span><br></pre></td></tr></table></figure><h3 id="集合通知"><a href="#集合通知" class="headerlink" title="集合通知"></a>集合通知</h3><p>可以通过传递到通知模块当中的RealmCollectionChange参数来访问这些变更。该对象存放了受删除（deletions），插入（insertions）以及修改（modifications）所影响的索引信息。</p><h3 id="对象通知"><a href="#对象通知" class="headerlink" title="对象通知"></a>对象通知</h3><p>Realm支持对象级别的通知。可以在特定的Realm对象上进行通知单注册，对象被删除，修改时获取相应的通知。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StepCounter</span>: <span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> steps <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stepCounter <span class="operator">=</span> <span class="type">StepCounter</span>()</span><br><span class="line"><span class="keyword">let</span> realm <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">Realm</span>()</span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">    realm.add(stepCounter)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> token : <span class="type">NotificationToken</span>?</span><br><span class="line">token <span class="operator">=</span> stepCounter.observe &#123; change <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> change &#123;</span><br><span class="line">    <span class="keyword">case</span> .change(<span class="keyword">let</span> properties):</span><br><span class="line">        <span class="keyword">for</span> property <span class="keyword">in</span> properties &#123;</span><br><span class="line">            <span class="keyword">if</span> property.name <span class="operator">==</span> <span class="string">&quot;steps&quot;</span> <span class="operator">&amp;&amp;</span> property.newValue <span class="keyword">as!</span> <span class="type">Int</span> <span class="operator">&gt;</span> <span class="number">1000</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Congratulations, you&#x27;ve exceeded 1000 steps.&quot;</span>)</span><br><span class="line">                token <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;An error occurred: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .deleted:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The object was deleted.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨线程使用Realm数据库"><a href="#跨线程使用Realm数据库" class="headerlink" title="跨线程使用Realm数据库"></a>跨线程使用Realm数据库</h2><p>在不同的线程中使用同一个Realm文件，必须每一个线程初始化一个新的Realm实例。</p><p>不支持跨线程共享Realm实例。Realm实例要访问相同的Realm文件还必须使用相同的Realm.Configuration</p><h2 id="Realm数据库中图片的插入，读取"><a href="#Realm数据库中图片的插入，读取" class="headerlink" title="Realm数据库中图片的插入，读取"></a>Realm数据库中图片的插入，读取</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="type">HeadPortrait</span>:<span class="type">Object</span> &#123;</span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> data: <span class="type">Data</span>?</span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> date: <span class="type">Date</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将图片转换为Data</span></span><br><span class="line"><span class="keyword">let</span> imageURL <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;0&quot;</span>, withExtension: <span class="string">&quot;PNG&quot;</span>)<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> imageData <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">Data</span>(contentsOf: imageURL)</span><br><span class="line"><span class="comment">// 将Data数据放到实体对象中</span></span><br><span class="line"><span class="keyword">let</span> portrait <span class="operator">=</span> <span class="type">HeadPortrait</span>()</span><br><span class="line">portrait.data <span class="operator">=</span> imageData</span><br><span class="line"><span class="comment">// 数据持久化操作</span></span><br><span class="line"><span class="keyword">try!</span> realm.write &#123;</span><br><span class="line">  realm.add(portrait)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> portraits <span class="operator">=</span> realm.objects(<span class="type">HeadPortrait</span>.<span class="keyword">self</span>).sorted(byKeyPath: <span class="string">&quot;date&quot;</span>, ascending: <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> portraits.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> imgData <span class="operator">=</span> portraits[<span class="number">0</span>].data &#123;</span><br><span class="line">    <span class="keyword">self</span>.imageView.image <span class="operator">=</span> <span class="type">UIImage</span>(data:imgData)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Realm-Swift学习笔记（一）&quot;&gt;&lt;a href=&quot;#Realm-Swift学习笔记（一）&quot; class=&quot;headerlink&quot; title=&quot;Realm-Swift学习笔记（一）&quot;&gt;&lt;/a&gt;Realm-Swift学习笔记（一）&lt;/h1&gt;&lt;h2 id=&quot;基</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/09/06/hello-world/"/>
    <id>http://example.com/2022/09/06/hello-world/</id>
    <published>2022-09-06T07:29:04.274Z</published>
    <updated>2022-09-06T07:29:04.274Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
